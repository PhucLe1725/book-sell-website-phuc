import React, { useState, useEffect } from "react";
import qrImage from "../../assets/qr_checkout.png";
import axios from "axios";
import Cookies from "js.cookie"; // Import Cookies ƒë·ªÉ l·∫•y token

const Checkout = () => {
  const [activeSection, setActiveSection] = useState(null); // Qu·∫£n l√Ω ph·∫ßn hi·ªÉn th·ªã (QR ho·∫∑c Coin)
  const [paymentResult, setPaymentResult] = useState({ qr: "", coin: "" }); // K·∫øt qu·∫£ thanh to√°n
  const [order, setOrder] = useState(null); // L∆∞u th√¥ng tin ƒë∆°n h√†ng
  const [orderId, setOrderId] = useState(1); // L∆∞u orderId, m·∫∑c ƒë·ªãnh l√† 1 ƒë·ªÉ test

  const userId = Cookies.get("userId"); // L·∫•y userId t·ª´ cookie

  // Hi·ªÉn th·ªã ph·∫ßn t∆∞∆°ng ·ª©ng
  const showSection = (section) => {
    setActiveSection(section);
  };

  // L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ API
  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const response = await axios.get(
          "http://localhost:8090/api/payment/pending-orders",
          {
            headers: {
              Authorization: `Bearer ${Cookies.get("authToken")}`, // Th√™m header Authorization
            },
          }
        );
        console.log("Pending Orders:", response.data);

        // L·∫•y ƒë∆°n h√†ng c√≥ orderId = orderId (m·∫∑c ƒë·ªãnh l√† 1)
        const selectedOrder = response.data.find((order) => order.orderId === orderId);
        if (selectedOrder) {
          setOrder(selectedOrder);
        } else {
          console.error(`Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi orderId = ${orderId}`);
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);
      }
    };

    fetchOrder();
  }, [orderId]); // Th√™m orderId v√†o dependency ƒë·ªÉ c·∫≠p nh·∫≠t khi thay ƒë·ªïi

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
  const checkPayment = async (method) => {
    try {
      const response = await axios.get(
        `http://localhost:8090/api/payment/check-status/${orderId}`,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("authToken")}`,
          },
        }
      );
      console.log("Payment Status:", response.data);

      if (response.data.status === "Completed") {
        setPaymentResult((prev) => ({
          ...prev,
          [method]: "‚úÖ Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n.",
        }));
      } else {
        setPaymentResult((prev) => ({
          ...prev,
          [method]: "‚ö†Ô∏è ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n.",
        }));
      }
    } catch (error) {
      console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:", error);
      setPaymentResult((prev) => ({
        ...prev,
        [method]: "‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n.",
      }));
    }
  };

  // Thanh to√°n b·∫±ng xu
  const payWithBalance = async () => {
    try {
      const response = await axios.post(
        "http://localhost:8090/api/payment/pay-with-balance",
        {
          orderIds: [orderId], // L·∫•y t·ª´ bi·∫øn orderId
          userId: userId, // L·∫•y t·ª´ cookie
        },
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("authToken")}`,
          },
        }
      );
      console.log("Payment Response:", response.data);
  
      if (response.data.success) {
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† s·ªë d∆∞ c√≤n l·∫°i
        alert(`‚úÖ ${response.data.message}\nS·ªë d∆∞ c√≤n l·∫°i: ${response.data.remainingBalance.toLocaleString("vi-VN")} xu`);
        setPaymentResult((prev) => ({
          ...prev,
          coin: `‚úÖ ${response.data.message}`,
        }));
      } else {
        // Hi·ªÉn th·ªã th√¥ng b√°o th·∫•t b·∫°i
        alert(`‚ö†Ô∏è ${response.data.message}`);
        setPaymentResult((prev) => ({
          ...prev,
          coin: `‚ö†Ô∏è ${response.data.message}`,
        }));
      }
    } catch (error) {
      console.error("L·ªói khi thanh to√°n b·∫±ng xu:", error);
      alert("‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán thanh to√°n b·∫±ng xu.");
      setPaymentResult((prev) => ({
        ...prev,
        coin: "‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán thanh to√°n.",
      }));
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-blue-400 to-indigo-500">
      <div className="bg-white rounded-2xl shadow-lg p-8 w-[480px] text-center">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">
          Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
        </h2>
        <div className="flex justify-center gap-4 mb-6">
          <button
            onClick={() => showSection("qr")}
            className="px-6 py-3 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition"
          >
            üí≥ QR Code
          </button>
          <button
            onClick={() => showSection("coin")}
            className="px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition"
          >
            ü™ô D√πng Xu
          </button>
        </div>

        {/* QR Code Section */}
        {activeSection === "qr" && order && (
          <div className="animate-fade-in">
            <img
              src={qrImage}
              alt="QR Code"
              className="w-60 h-60 object-cover rounded-lg shadow-md mx-auto mb-4"
            />
            <div className="text-lg font-semibold text-red-600 mb-4">
              Gi√°: {parseFloat(order.amount).toLocaleString("vi-VN", {
                style: "currency",
                currency: "VND",
              })}
            </div>
            <button
              onClick={() => checkPayment("qr")}
              className="px-6 py-3 bg-purple-500 text-white font-semibold rounded-lg shadow-md hover:bg-purple-600 transition"
            >
              Ki·ªÉm tra thanh to√°n
            </button>
            <div
              className={`mt-4 text-sm font-medium ${
                paymentResult.qr.includes("‚úÖ")
                  ? "text-green-600"
                  : "text-red-600"
              }`}
            >
              {paymentResult.qr}
            </div>
          </div>
        )}

        {/* Coin Section */}
        {activeSection === "coin" && order && (
          <div className="animate-fade-in">
            <div className="text-lg font-semibold text-red-600 mb-4">
              Gi√°: {Math.round(parseFloat(order.amount) / 1000)} Xu
            </div>
            <button
              onClick={payWithBalance}
              className="px-6 py-3 bg-purple-500 text-white font-semibold rounded-lg shadow-md hover:bg-purple-600 transition"
            >
              Thanh to√°n
            </button>
            <div
              className={`mt-4 text-sm font-medium ${
                paymentResult.coin.includes("‚úÖ")
                  ? "text-green-600"
                  : "text-red-600"
              }`}
            >
              {paymentResult.coin}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Checkout;